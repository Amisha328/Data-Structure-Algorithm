// Partition a set into two subsets such that the difference of subset sums is minimum.
// Given an integer array arr of size N, the task is to divide it into two sets S1 and S2 
// such that the absolute difference between their sums is minimum and find the minimum difference

// Problem: https://practice.geeksforgeeks.org/problems/minimum-sum-partition3317/1/#
// https://www.codingninjas.com/codestudio/problems/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum_842494?leftPanelTab=0

#include <bits/stdc++.h>
using namespace std;

class Solution{

  public:
   int minDifference(vector<int> &arr)  { 
	    // Your code goes here
       int n = arr.size();
       int k = accumulate(arr.begin(), arr.end(), 0);
       vector<vector<bool>> dp(n, vector<bool>(k+1, false));
                    
        for(int idx = 0; idx < n; idx++)  dp[idx][0] = true;
        if(arr[0] <= k) dp[0][arr[0]] = true;
        
        for(int idx = 1; idx < n; idx++)
        {
            for(int target = 1; target <= k; target++)
            {
                bool not_take = dp[idx-1][target];
                bool take = false;
                if(target >= arr[idx])
                        take = dp[idx-1][target-arr[idx]];

                dp[idx][target] = (not_take | take);
            }
        }
    
        int ans = INT_MAX;
    	for(int j = 0; j <= k/2; j++)
        {
            if(dp[n-1][j] == true)
            {
                //cout<<j<<" ";
                ans = min(ans, abs(2*j - k));
            }
                
        }
    
        return ans;     
    }
};

int main() 
{
        int n;
        cin >> n;

        vector<int> a(n);
        for(int i = 0; i < n; i++)
        	cin >> a[i];
        Solution ob;
        cout << ob.minDifference(a) << "\n";

    return 0;
}  

// Expected Time Complexity: O(N*|sum of array elements|)
// Expected Auxiliary Space: O(N*|sum of array elements|)
